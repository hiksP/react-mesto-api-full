{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      adress,\n      token\n    } = _ref;\n    this._adress = adress;\n    this._token = token;\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    console.log(res.json);\n    return res.json();\n  } // загрука информации пользователя\n\n\n  getUserInfo() {\n    return fetch(`${this._adress}/users/me`, {\n      headers: this._headers,\n      credentials: 'include'\n    }).then(this._getResponseData);\n  } // загрузка карточек\n\n\n  getCards() {\n    return fetch(`${this._adress}/cards`, {\n      headers: this._headers,\n      credentials: 'include'\n    }).then(this._getResponseData);\n  } // отправка информации о пользователе на сервер\n\n\n  editInfo(name, status) {\n    return fetch(`${this._adress}/users/me`, {\n      method: \"PATCH\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: status\n      })\n    }).then(this._getResponseData);\n  } // загрузка карточки на сервер\n\n\n  uploadCard(cardName, cardLink) {\n    return fetch(`${this._adress}/cards`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardName,\n        link: cardLink\n      })\n    }).then(this._getResponseData);\n  } // удаление карточки\n\n\n  deleteCard(cardId, isMine) {\n    if (isMine) {\n      return fetch(`${this._adress}/cards/${cardId}`, {\n        method: \"DELETE\",\n        credentials: 'include',\n        headers: this._headers\n      }).then(this._getResponseData);\n    }\n  } // изменение лайка (добавление или удаление)\n\n\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._adress}/cards/${cardId}/likes`, {\n        method: \"DELETE\",\n        credentials: 'include',\n        headers: this._headers\n      }).then(this._getResponseData);\n    } else {\n      return fetch(`${this._adress}/cards/${cardId}/likes`, {\n        method: \"PUT\",\n        credentials: 'include',\n        headers: this._headers\n      }).then(this._getResponseData);\n    }\n  } // изминение аватарка пользователя\n\n\n  changeAvatar(link) {\n    return fetch(`${this._adress}/users/me/avatar`, {\n      method: \"PATCH\",\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(this._getResponseData);\n  }\n\n} // создание класса АПИ и его экспорт\n\n\nexport const api = new Api({\n  adress: 'plavskikh.mesto.nomorepartiesxyz.ru',\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});","map":{"version":3,"sources":["C:/Users/hiksvalP/react-mesto-api-full/frontend/src/utils/Api.js"],"names":["Api","constructor","adress","token","_adress","_token","_getResponseData","res","ok","Promise","reject","status","console","log","json","getUserInfo","fetch","headers","_headers","credentials","then","getCards","editInfo","name","method","body","JSON","stringify","about","uploadCard","cardName","cardLink","link","deleteCard","cardId","isMine","changeLikeCardStatus","isLiked","changeAvatar","avatar","api"],"mappings":"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","sourcesContent":["class Api {\r\n    constructor({adress, token}) {\r\n        this._adress = adress;\r\n        this._token = token;\r\n    }\r\n\r\n\r\n    _getResponseData(res) {\r\n        if (!res.ok) {\r\n            return Promise.reject(`Ошибка ${res.status}`) \r\n        }\r\n        console.log(res.json);\r\n        return res.json();\r\n    } \r\n\r\n    // загрука информации пользователя\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this._adress}/users/me`, {\r\n            headers: this._headers,\r\n            credentials: 'include',\r\n        }).then(this._getResponseData)\r\n    }\r\n\r\n    // загрузка карточек\r\n\r\n    getCards() {\r\n        return fetch(`${this._adress}/cards`, {\r\n            headers: this._headers,\r\n            credentials: 'include',\r\n        }).then(this._getResponseData)\r\n    }\r\n  \r\n    // отправка информации о пользователе на сервер\r\n\r\n    editInfo(name, status) {\r\n        return fetch(`${this._adress}/users/me`, {\r\n            method: \"PATCH\",\r\n            credentials: 'include',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                about: status\r\n            })\r\n        }).then(this._getResponseData)\r\n    }\r\n\r\n    // загрузка карточки на сервер\r\n\r\n    uploadCard(cardName, cardLink) {\r\n        return fetch(`${this._adress}/cards`, {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: cardName,\r\n                link: cardLink\r\n            })\r\n        }).then(this._getResponseData)\r\n    }\r\n\r\n    // удаление карточки\r\n\r\n    deleteCard(cardId, isMine) {\r\n        if(isMine) {\r\n                return fetch(`${this._adress}/cards/${cardId}`, {\r\n                method: \"DELETE\",\r\n                credentials: 'include',\r\n                headers: this._headers,\r\n            }).then(this._getResponseData)\r\n        }\r\n    }\r\n\r\n    // изменение лайка (добавление или удаление)\r\n    changeLikeCardStatus(cardId, isLiked) {\r\n        if(isLiked) {\r\n            return fetch(`${this._adress}/cards/${cardId}/likes`, {\r\n                method: \"DELETE\",\r\n                credentials: 'include',\r\n                headers: this._headers,\r\n            }).then(this._getResponseData)\r\n        } else {\r\n            return fetch(`${this._adress}/cards/${cardId}/likes`, {\r\n                method: \"PUT\",\r\n                credentials: 'include',\r\n                headers: this._headers,\r\n            }).then(this._getResponseData)\r\n        }\r\n    } \r\n    \r\n    // изминение аватарка пользователя\r\n\r\n    changeAvatar(link) {\r\n        return fetch(`${this._adress}/users/me/avatar`, {\r\n            method: \"PATCH\",\r\n            credentials: 'include',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: link\r\n            })\r\n        }).then(this._getResponseData)\r\n    }\r\n}\r\n    // создание класса АПИ и его экспорт\r\n\r\nexport const api = new Api({\r\n    adress: 'plavskikh.mesto.nomorepartiesxyz.ru',\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n})"]},"metadata":{},"sourceType":"module"}