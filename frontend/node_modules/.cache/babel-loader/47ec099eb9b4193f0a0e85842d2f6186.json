{"ast":null,"code":"class AuthApi {\n  constructor(_ref) {\n    let {\n      baseUrl\n    } = _ref;\n    this._baseUrl = baseUrl;\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка ${res.status}`);\n    }\n\n    return res.json();\n  } //регистрация\n\n\n  signUp(email, password) {\n    console.log(email);\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._getResponseData(res));\n  } // авторизация\n\n\n  signIn(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  tokenCheck(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      credentials: 'include',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._getResponseData);\n  }\n\n}\n\nexport const authApi = new AuthApi({\n  baseUrl: 'http://localhost:3001'\n});","map":{"version":3,"sources":["C:/Users/hiksvalP/react-mesto-api-full/frontend/src/utils/authApi.js"],"names":["AuthApi","constructor","baseUrl","_baseUrl","_getResponseData","res","ok","Promise","reject","status","json","signUp","email","password","console","log","fetch","method","credentials","headers","body","JSON","stringify","then","signIn","tokenCheck","token","authApi"],"mappings":"AAAA,MAAMA,OAAN,CAAc;AACVC,EAAAA,WAAW,OAAY;AAAA,QAAX;AAACC,MAAAA;AAAD,KAAW;AACnB,SAAKC,QAAL,GAAgBD,OAAhB;AACH;;AAEDE,EAAAA,gBAAgB,CAACC,GAAD,EAAM;AAClB,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,aAAOC,OAAO,CAACC,MAAR,CAAgB,UAASH,GAAG,CAACI,MAAO,EAApC,CAAP;AACH;;AACD,WAAOJ,GAAG,CAACK,IAAJ,EAAP;AACH,GAVS,CAYV;;;AACAC,EAAAA,MAAM,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,WAAOI,KAAK,CAAE,GAAE,KAAKb,QAAS,SAAlB,EAA4B;AACpCc,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,WAAW,EAAE,SAFuB;AAGpCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAH2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACV,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAf;AAN8B,KAA5B,CAAL,CAOJU,IAPI,CAOElB,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAPV,CAAP;AAQH,GAvBS,CAyBV;;;AACAmB,EAAAA,MAAM,CAACZ,KAAD,EAAQC,QAAR,EAAkB;AACpB,WAAOG,KAAK,CAAE,GAAE,KAAKb,QAAS,SAAlB,EAA4B;AACpCc,MAAAA,MAAM,EAAE,MAD4B;AAEpCC,MAAAA,WAAW,EAAE,SAFuB;AAGpCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX,OAH2B;AAMpCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACV,QAAAA,KAAD;AAAQC,QAAAA;AAAR,OAAf;AAN8B,KAA5B,CAAL,CAOJU,IAPI,CAOElB,GAAD,IAAS,KAAKD,gBAAL,CAAsBC,GAAtB,CAPV,CAAP;AAQH;;AAEDoB,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAEd,WAAOV,KAAK,CAAE,GAAE,KAAKb,QAAS,WAAlB,EAA8B;AACtCc,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,WAAW,EAAE,SAFyB;AAGtCC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAH6B,KAA9B,CAAL,CAMJI,IANI,CAMC,KAAKnB,gBANN,CAAP;AAOH;;AA9CS;;AAmDd,OAAO,MAAMuB,OAAO,GAAG,IAAI3B,OAAJ,CAAY;AAC/BE,EAAAA,OAAO,EAAE;AADsB,CAAZ,CAAhB","sourcesContent":["class AuthApi {\r\n    constructor({baseUrl}) {\r\n        this._baseUrl = baseUrl;\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        if (!res.ok) {\r\n            return Promise.reject(`Ошибка ${res.status}`) \r\n        }\r\n        return res.json();\r\n    } \r\n\r\n    //регистрация\r\n    signUp(email, password) {\r\n        console.log(email)\r\n        return fetch(`${this._baseUrl}/signup`, {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\" \r\n            },\r\n            body: JSON.stringify({email, password})\r\n        }).then((res) => this._getResponseData(res))\r\n    }\r\n\r\n    // авторизация\r\n    signIn(email, password) {\r\n        return fetch(`${this._baseUrl}/signin`, {\r\n            method: \"POST\",\r\n            credentials: 'include',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\" \r\n            },\r\n            body: JSON.stringify({email, password})\r\n        }).then((res) => this._getResponseData(res))\r\n    }\r\n\r\n    tokenCheck(token) {\r\n        \r\n        return fetch(`${this._baseUrl}/users/me`, {\r\n            method: \"GET\",\r\n            credentials: 'include',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        }).then(this._getResponseData)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const authApi = new AuthApi({\r\n    baseUrl: 'http://localhost:3001'\r\n})"]},"metadata":{},"sourceType":"module"}